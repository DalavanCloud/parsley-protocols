initial = lineState

# sws: single whitespace
sws = ~delimiter (' '| '\r' | '\n' | '\t' | '\f' | '\v')
delimiter = (-> len(receiver.delimiter)):l <anything{l}>:d ?(d == receiver.delimiter) -> d

data = anything:a -> receiver.rawDataReceived(a)

line = (-> receiver.MAX_LENGTH):MAX_LEN <(~delimiter anything){0,MAX_LEN}>:l delimiter -> l
        # a dirty hack here.
        | (-> len(receiver._trampolinedParser._interp.input.data)):length
            <anything{length}>:alldata
            -> receiver.lineLengthExceeded(alldata)

lineState = ?(receiver.blocked is not None) line:l !(receiver.blocked.append(l))
    | !(receiver.resetTimeout()) (-> receiver.parseState):state parseState(state)

parseState :state = ?(state == "command")
                    sws* <(~delimiter ~sws anything)*>:tag
                    sws* <(~delimiter ~sws anything)*>:cmd
                    sws* <(~delimiter anything)*>:rest
                    delimiter
                    -> receiver.parse_command(tag, cmd, rest)
                | ?(state in ("idle", "pending"))
                    line:l
                    -> getattr(receiver, "parse_"+state)(l)


byte = anything:b -> ord(b)
short = byte:high byte:low -> high << 8 | low
int = short:high short:low -> high << 16 | low

message = short:id
            byte:b
            (-> b>>7 & 1, b>>3 & 1, b>>2 & 1, b>>1 & 1, b & 1):(answer, opCode, auth, trunc, recDes)
            byte:b (-> b>>7 & 1, b & 0xf):(recAv, rCode)
            short:nq short:nans short:nns short:nadd
            query{nq}:nqueries
            (rrheader(auth)){nans}:rrhnans
            (rrheader(auth)){nns}:rrhnns
            (rrheader(auth)){nadd}:rrhnadd
            -> Message(id, answer, opCode, auth, trunc, recDes,
                recAv, rCode, nqueries, rrhnans, rrhnns, rrhnadd)

query = name:n short:t short:c -> Query(n.name, t, c)

name = label*:labels (byte:b ?(b == 0) -> Name(labels)
        | pointer:offset -> Name(labels, offset))
label = byte:l ?(0 < l < 64) <byte{l}>:label -> label
pointer = byte:ptrH ?(ptrH >> 6 == 3) byte:ptrL -> (ptrH & 63) << 8 | ptrL

rrheader :auth = name:n short:t short:cls int:ttl short:rdlength
            (-> getPayloadName(t)):plname payload(plname ttl rdlength):pl
            -> RRHeader(n.name, t, cls, ttl, pl, auth)

payload :type :ttl :rdl = ?(type == 'A') <anything{4}>:address
                            -> A(ttl=ttl, address=address)
                        | ?(type == 'A6') byte:pfl (-> int((128 - pfl) / 8.0)):bl
                            (-> b'', b''):(sf, n)
                            (?(bl) <anything{bl}>:sf)? (?(pfl) name:n)?
                             -> A6(ttl=ttl, prefixLen=pfl, suffix=sf, prefix=n)
                        | ?(type == 'AAAA') <anything{16}>:address
                            -> AAAA(ttl=ttl, address=address)
                        | ?(type == 'AFSDB') short:subtype name:n
                            -> AFSDB(ttl=ttl, subtype=subtype, hostname=n.name)
                        | ?(type in ('CNAME', 'DNAME', 'MB', 'MD', 'MF', 'MR', 'NS', 'PTR', 'MG'))
                            name:n -> eval(type)(ttl=ttl, name=n.name)
                        | ?(type == 'HINFO') byte:cpulen <anything{cpulen}>:cpu byte:oslen <anything{oslen}>:os
                            -> HINFO(ttl=ttl, cpu=cpu, os=os)
                        | ?(type == 'MINFO') name:rmailbx name:emailbx
                            -> MINFO(ttl=ttl, rmailbx=rmailbx.name, emailbx=emailbx.name)
                        | ?(type == 'MX') short:pref name:n
                            -> MX(ttl=ttl, preference=pref, name=n.name)
                        | ?(type == 'NAPTR') short:order short:pref
                            byte:l <anything{l}>:flags byte:l <anything{l}>:service
                            byte:l <anything{l}>:regexp name:n
                            -> NAPTR(ttl=ttl, order=order, preference=pref, flags=flags,
                                service=service, regexp=regexp, replacement=n.name)
                        | ?(type == 'NULL') <anything{rdl}>:p -> NULL(ttl=ttl, payload=p)
                        | ?(type == 'RP') name:mbox name:txt
                            -> RP(ttl=ttl, mbox=mbox.name, txt=txt.name)
                        # The corresponding fmt is !LlllL, why signed long here?
                        | ?(type == 'SOA')  name:mname name:rname int:serial int:refresh int:retry
                            int:expire int:minimum
                            -> SOA(ttl=ttl, mname=mname.name, rname=rname.name,
                                serial=serial, refresh=refresh, retry=retry, expire=expire, minimum=minimum)
                        | ?(type == 'SRV') short:priority short:weight short:port name:n
                            -> SRV(ttl=ttl, priority=priority, weight=weight,
                                port=port, target=n.name)
                        | ?(type in ('SPF', 'TXT')) (?(rdl > 0) byte:l (-> rdl-l-1):rdl <anything{l}>)*:data
                            -> eval(type)(*data, ttl=ttl)
                        | ?(type == 'WKS') <anything{4}>:address byte:protocol (-> rdl - 5):l <anything{l}>:map
                            -> WKS(ttl=ttl, address=address, protocol=protocol, map=map)
                        | ?(type == 'UnknownRecord') <anything{rdl}>:data
                            -> UnknownRecord(data=data, ttl=ttl)

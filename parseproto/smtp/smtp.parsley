initial = line_command

# sws: single whitespace
sws = ~delimiter (' '| '\r' | '\n' | '\t' | '\f' | '\v')
delimiter = '\r\n'

line_command = sws* command:cmd sws*
            | <(~delimiter anything)*> delimiter !(receiver.sendSyntaxError())
# supposing the max command length is 20
command = <letter{1,20}>:cmd !(receiver.state_COMMAND(cmd))
parameter = <(~delimiter anything)*>:param

cmd_mail = (
        ?(receiver.do_MAIL(q="from")) parameter delimiter # This parameter is discarded.
        | icase("FROM:") sws* mail_path:addr sws* (sws <(~delimiter anything)*>:opts)? delimiter
          -> receiver.do_MAIL("to", addr)
        | -> receiver.do_MAIL("notmatch")
        ) !(setattr(receiver, "mode", "command"))
cmd_rcpt = (
        ?(receiver.do_RCPT(q="from")) parameter delimiter # This parameter is discarded.
        | icase("TO:") sws* rcpt_path:addr sws* (sws <(~delimiter anything)*>:opts)? delimiter
          -> receiver.do_RCPT("rec", addr)
        | -> receiver.doRCPT("notmatch")
        ) !(setattr(receiver, "mode", "command"))

cmd_data = parameter:param delimiter -> receiver.do_DATA(param)

cmd_others :name = parameter:param delimiter !(getattr(receiver, "do_"+name.upper())(param))
                   !(setattr(receiver, 'mode', "command"))

rcpt_path = <'<' qstring:qs '>'>
        | qstring
mail_path = "<>"
        | <'<' qstring:qs '>'>
        | qstring
qstring = <('"' (~('"') anything)* '"'
        | "\\" ~delimiter anything
        | atom
        | anything:ch ?(ch in "@.,:") -> ch
        )+>
atom = anything:ch ?('0'<=ch<='9' or 'A'<=ch<='Z' or 'a'<=ch<='z')
    | anything:ch ?(ch in "-!\#$%&'*+/=?^_`{|}~")

icase :s = (-> len(s)):length <anything{length}>:matched ?(matched.upper() == s.upper()) -> matched
line_data = line:l !(receiver.state_DATA(l))
line = <(~delimiter anything)*>:l delimiter (?(len(l) <= receiver.MAX_LENGTH) -> l
        | -> receiver.lineLengthExceeded(l))



# This is for esmtp
cmd_auth = parameter:param delimiter !(receiver.ext_AUTH(param))
cmd_starttls = parameter:param delimiter !(receiver.ext_STARTTLS(param)) !(setattr(receiver, 'mode', "command"))
line_auth = line:l !(receiver.state_AUTH(l))

#line_command = position:start
#               ~delimiter ws command:cmd ws parameter:param
#               delimiter
#               position:end
#               (?(end-start <= receiver.MAX_LENGTH) -> receiver.lineReceived(cmd=cmd, param=param)
#        | (-> receiver._trampolinedParser._interp.input.data[start:end]):l -> receiver.lineLengthExceeded(l))
# position = -> receiver._trampolinedParser._interp.input.position

